python
if True == True:
  import os

  # set logging
  gdb.execute('set logging file '          + os.environ['DBG_LOG_FULL'] )
  gdb.execute('set logging on')

  # enable command tracing (log input to file)
  gdb.execute('set trace-commands on')

  # allow background execution
  gdb.execute('set target-async on')

  # pagination needs to be off for the following setting
  gdb.execute('set pagination off')

  # allow some threads to run while others are stopped
  gdb.execute('set non-stop on')
  gdb.execute('set detach-on-fork off')


  # set paths
  #set environment DBG_IMG_SUBDIR=brs2s

  # this script MUST be executed/loaded from "parent" directory of all git checkouts
  gdb.execute('cd '                        + os.environ['DBG_GIT_BASE_DIR'] )

  gdb.execute('set sysroot '               + os.environ['DBG_GIT_SHINE_DIR_NAME']    + '/target/' + os.environ['DBG_IMG_SUBDIR'] + '/rootfs.unstripped/')

  gdb.execute('set solib-absolute-prefix ' + os.environ['DBG_GIT_SHINE_DIR_NAME']    + '/target/' + os.environ['DBG_IMG_SUBDIR'] + '/rootfs.unstripped/')

  gdb.execute('set solib-search-path '     + os.environ['DBG_GIT_SHINE_DIR_NAME']    + '/target/' + os.environ['DBG_IMG_SUBDIR'] + '/rootfs.unstripped/')
  gdb.execute('set solib-search-path '     + os.environ['ARM_TOOLCHAIN_INSTALL_DIR'] + '/arm-linux-gnueabihf/lib')
  gdb.execute('set solib-search-path '     + os.environ['ARM_TOOLCHAIN_INSTALL_DIR'] + '/arm-linux-gnueabihf/libc/usr/lib')

  gdb.execute('set debug-file-directory '  + os.environ['ARM_TOOLCHAIN_INSTALL_DIR'] + '/arm-linux-gnueabihf/libc/lib/debug')

  # correctly show source files for stuff
  gdb.execute('directory '                 +  os.environ['DBG_GIT_SHINE_DIR_NAME'] )
  gdb.execute('directory '                 +  os.environ['DBG_GIT_SHARED_DIR_NAME'] )
  gdb.execute('directory '                 +  os.environ['DBG_GIT_LINUX_DIR_NAME'] + '/busybox')
  gdb.execute('directory '                 +  os.environ['DBG_GIT_LINUX_DIR_NAME'] + '/kernel/linux-4.14')

  # show GLIBC source code
  gdb.execute('directory '                 +  os.environ['DBG_GIT_LINUX_DIR_NAME'] + '/toolchain/glibc-2.23.1/manual')
  gdb.execute('directory '                 +  os.environ['DBG_GIT_LINUX_DIR_NAME'] + '/toolchain/glibc-2.23.1/nptl')

# end python
end  



define brs_switchdrv
  python
if True == True:
    import os
    gdb.execute('dont-repeat')

    #file p5_smart_shine/target/am335_l/avenger/DEBUG_6/ipl/switchdrvr
    gdb.execute('file ' +  os.environ['DBG_GIT_SHINE_DIR_NAME'] + '/target/am335_l/avenger/' + os.environ['DBG_LEVEL_SUBDIR'] + '/ipl/switchdrvr')

    if 'DBG_REMOTE' in os.environ:
      gdb.execute('target remote 192.168.2.100:333')
    else:
      gdb.execute('target extended-remote 192.168.248.100:12345')

      p = gdb.execute('info os processes', to_string=True)
      pr = p.split("\n")
      for line in pr:
        if "switchdrvr" in line:
          tmp = line.strip().split(" ")
          pid = int(tmp[0])
          if pid < 1000:
            gdb.write("Attaching to " + tmp[0] + "\n")
            gdb.execute('attach ' + tmp[0], True)
    # end "remote debug: DBG_REMOTE"

  # end python
  end

  # end define brs_switchdrv
  end

# call brs_switchdrv
brs_switchdrv

